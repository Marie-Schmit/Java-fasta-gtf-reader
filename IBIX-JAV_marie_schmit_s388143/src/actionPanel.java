
import java.awt.Container;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JPanel;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author marie
 */
public class actionPanel extends javax.swing.JPanel {

    /**
     * Creates new form actionPanel
     */
    public actionPanel() {
        initComponents();
                
        //Delete the arrow icon of the internal frame
        Container pane = ((BasicInternalFrameUI) internalFrame.getUI()).getNorthPane();
        pane.remove(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame = new javax.swing.JInternalFrame();
        menuBar = new javax.swing.JMenuBar();
        menuNewFile = new javax.swing.JMenu();
        gtfMenuDisplayText = new javax.swing.JMenu();
        gtfMenuStats = new javax.swing.JMenu();
        menuAverageNumberExons = new javax.swing.JMenuItem();
        menuLongestShortestModels = new javax.swing.JMenuItem();
        menuAverageGeneLength = new javax.swing.JMenuItem();
        gtfMenuAllStats = new javax.swing.JMenuItem();
        fastaMenuDisplayText = new javax.swing.JMenu();
        fastaMenuStats = new javax.swing.JMenu();
        menuSequenceLen = new javax.swing.JMenuItem();
        menuGcContent = new javax.swing.JMenuItem();
        menuAllFastaStats = new javax.swing.JMenuItem();
        MenuExons = new javax.swing.JMenu();
        menuTextExons = new javax.swing.JMenuItem();
        menuGraphExons = new javax.swing.JMenuItem();

        internalFrame.setBorder(null);
        internalFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        internalFrame.setEnabled(false);
        internalFrame.setFocusable(false);
        internalFrame.setFrameIcon(null);
        internalFrame.setVisible(true);

        menuBar.setBorder(null);

        menuNewFile.setText("Choose new file");
        menuNewFile.setBorderPainted(true);
        menuNewFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuNewFileMouseClicked(evt);
            }
        });
        menuBar.add(menuNewFile);

        gtfMenuDisplayText.setText("Display table");
        gtfMenuDisplayText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gtfMenuDisplayTextMousePressed(evt);
            }
        });
        menuBar.add(gtfMenuDisplayText);

        gtfMenuStats.setText("Gtf statistics");

        menuAverageNumberExons.setText("Average number of exons per gene");
        menuAverageNumberExons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAverageNumberExonsActionPerformed(evt);
            }
        });
        gtfMenuStats.add(menuAverageNumberExons);

        menuLongestShortestModels.setText("Longest shortest genes models");
        menuLongestShortestModels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLongestShortestModelsActionPerformed(evt);
            }
        });
        gtfMenuStats.add(menuLongestShortestModels);

        menuAverageGeneLength.setText("Average gene length");
        menuAverageGeneLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAverageGeneLengthActionPerformed(evt);
            }
        });
        gtfMenuStats.add(menuAverageGeneLength);

        gtfMenuAllStats.setText("All statistics");
        gtfMenuAllStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gtfMenuAllStatsActionPerformed(evt);
            }
        });
        gtfMenuStats.add(gtfMenuAllStats);

        menuBar.add(gtfMenuStats);

        fastaMenuDisplayText.setText("Display text");
        fastaMenuDisplayText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fastaMenuDisplayTextMousePressed(evt);
            }
        });
        menuBar.add(fastaMenuDisplayText);

        fastaMenuStats.setText("Fasta statistics");

        menuSequenceLen.setText("Sequence length");
        menuSequenceLen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSequenceLenActionPerformed(evt);
            }
        });
        fastaMenuStats.add(menuSequenceLen);

        menuGcContent.setText("GC content");
        menuGcContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGcContentActionPerformed(evt);
            }
        });
        fastaMenuStats.add(menuGcContent);

        menuAllFastaStats.setText("All fasta statistics");
        menuAllFastaStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAllFastaStatsActionPerformed(evt);
            }
        });
        fastaMenuStats.add(menuAllFastaStats);

        menuBar.add(fastaMenuStats);

        MenuExons.setText("Exons");

        menuTextExons.setText("Display exons textually");
        menuTextExons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTextExonsActionPerformed(evt);
            }
        });
        MenuExons.add(menuTextExons);

        menuGraphExons.setText("Display exons graphically");
        menuGraphExons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGraphExonsActionPerformed(evt);
            }
        });
        MenuExons.add(menuGraphExons);

        menuBar.add(MenuExons);

        internalFrame.setJMenuBar(menuBar);

        javax.swing.GroupLayout internalFrameLayout = new javax.swing.GroupLayout(internalFrame.getContentPane());
        internalFrame.getContentPane().setLayout(internalFrameLayout);
        internalFrameLayout.setHorizontalGroup(
            internalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 945, Short.MAX_VALUE)
        );
        internalFrameLayout.setVerticalGroup(
            internalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(internalFrame)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(internalFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void menuAverageNumberExonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAverageNumberExonsActionPerformed
        //Create instance of class gtfStatistics
        gtfStatistics NumberExons = new gtfStatistics();
        
        double average = NumberExons.averageExons(mainFrame.fileChooserPanel.getFileContent()); //Average number of exons
        String message = "The average number of exons for this file is: " + average +"."; //Message to display to user
        
        //Increase font of text area since displayed text is small
        mainFrame.displayResultsPane.setFontTextArea(20);
        //Message displayed on text area
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false); //Only text is visible
        //Display text on specific panel
        mainFrame.displayResultsPane.displayText(message);
    }//GEN-LAST:event_menuAverageNumberExonsActionPerformed

    private void menuAverageGeneLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAverageGeneLengthActionPerformed
        //Create instance of class gtfStatistics
        gtfStatistics statistics = new gtfStatistics();
        
        //HashMap containing average length
        HashMap<String, Object[]> hashResults = new HashMap<String, Object[]>();
        //Run code to calculate length and their average
        hashResults = statistics.getMinMaxLength(mainFrame.fileChooserPanel.getFileContent());
        
        //Set messages to display
        String message = "The average length gene is: " + (double)hashResults.get("Average")[0];
        
        //Increase font of text area since displayed text is small
        mainFrame.displayResultsPane.setFontTextArea(20);
        //Message displayed on text area
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false); //Only text is visible
        //Display text on specific panel
        mainFrame.displayResultsPane.displayText(message);
    }//GEN-LAST:event_menuAverageGeneLengthActionPerformed

    private void menuSequenceLenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSequenceLenActionPerformed
        //Create instance of fastaStatistics
        fastaStatistics fastaStats = new fastaStatistics();
        //Create instance of class lengthResult to get the results of calculation
        fastaStatistics.lengthResult result = fastaStats.statisticSeqLength(mainFrame.fileChooserPanel.getFileContent());
  
       //Message to display
        String message;
        
        //Set messages to display
        if(result.getType().equals("single")) 
            message = "The sequence is " + result.getType() + ". It's length is " + result.getLength() + ".";
        else
            message = "The sequence is " + result.getType() + ". The average length of its sequences is " + result.getLength() + ".";
        
        //Increase font of text area since displayed text is small
        mainFrame.displayResultsPane.setFontTextArea(20);
        //Message displayed on text area
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false); //Only text is visible
        //Display text on specific panel
        mainFrame.displayResultsPane.displayText(message);
    }//GEN-LAST:event_menuSequenceLenActionPerformed

    private void gtfMenuDisplayTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gtfMenuDisplayTextMousePressed
        //Display table, not text result
        mainFrame.displayResultsPane.setPanelVisible(false, true, true, false); //Only table is visible
        //Opening on the first page
        mainFrame.displayResultsPane.setPageNumber(0);
        
        //Do not display next button if maximal number of pages equal 0
        if(mainFrame.displayResultsPane.maxNumberPages(mainFrame.fileChooserPanel.getFileContent()) == 0){
            mainFrame.displayResultsPane.setNextBtnVisible(false);
        }
        else{
            mainFrame.displayResultsPane.setNextBtnVisible(true);
        }
        
        //Do not display previous button
        mainFrame.displayResultsPane.setPreviousBtnVisible(false);
        
        mainFrame.displayResultsPane.displayText(mainFrame.fileChooserPanel.getFileContent(), 0, false);
    }//GEN-LAST:event_gtfMenuDisplayTextMousePressed

    private void fastaMenuDisplayTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fastaMenuDisplayTextMousePressed
        //Display text result
        mainFrame.displayResultsPane.setPanelVisible(true, false, true, false); //Text and buttons are visible
        //Set font of text results
        mainFrame.displayResultsPane.setFontTextArea(12);
        //Opening on the first page
        mainFrame.displayResultsPane.setPageNumber(0);
        
        //Do not display next button if maximal number of pages equal 0
        if(mainFrame.displayResultsPane.maxNumberPages(mainFrame.fileChooserPanel.getFileContent()) == 0){
            mainFrame.displayResultsPane.setNextBtnVisible(false);
        }
        else{
            mainFrame.displayResultsPane.setNextBtnVisible(true);
        }
        
        //Do not display previous button
        mainFrame.displayResultsPane.setPreviousBtnVisible(false);
        
        //Display content of fasta file, accessible from fileChooserPane
        mainFrame.displayResultsPane.displayText(mainFrame.fileChooserPanel.getFileContent(), 0, true);
    }//GEN-LAST:event_fastaMenuDisplayTextMousePressed

    private void menuNewFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuNewFileMouseClicked
        //Close all panels that are not text
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false); //Only text panel is visible
        chooseNewFile();
        mainFrame.displayResultsPane.resetText();
    }//GEN-LAST:event_menuNewFileMouseClicked

    private void menuLongestShortestModelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLongestShortestModelsActionPerformed
        //Create instance of class gtfStatistics
        gtfStatistics statistics = new gtfStatistics();
        
        //HashMap to contain longest and shortest genes
        HashMap<String, Object[]> hashResults = new HashMap<String, Object[]>();
        //Run code to find shortest and longest genes
        hashResults = statistics.getMinMaxLength(mainFrame.fileChooserPanel.getFileContent());
        
        //Set messages to display
        String message1 = "The shortest gene is: " + (String)hashResults.get("Shortest")[1] + " with a length of: " + (int)hashResults.get("Shortest")[0] + "\n";
        String message2 = "The longest gene is: " + (String)hashResults.get("Longest")[1] + " with a length of: " + (int)hashResults.get("Longest")[0];
        
        //Increase font of text area since displayed text is small
        mainFrame.displayResultsPane.setFontTextArea(20);
        //Message displayed on text area
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false); //Only text is visibles
        //Display text on specific panel
        mainFrame.displayResultsPane.displayText(message1 + message2);
    }//GEN-LAST:event_menuLongestShortestModelsActionPerformed

    private void gtfMenuAllStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gtfMenuAllStatsActionPerformed
        //Get results from all statistics functions
        //Create instance of class gtfStatistics
        gtfStatistics statistics = new gtfStatistics();
        
        //Calculate average number of exons per genes
        double average = statistics.averageExons(mainFrame.fileChooserPanel.getFileContent()); //Average number of exons
        String messageNbExons = "The average number of exons for this file is: " + average + "." + "\n\n";
        
        //HashMap to contain longest and shortest genes
        HashMap<String, Object[]> hashResults = new HashMap<String, Object[]>();
        //Run code to find shortest and longest genes
        hashResults = statistics.getMinMaxLength(mainFrame.fileChooserPanel.getFileContent());
        
        //Set messages to display shortest and longest genes
        String messageShortest = "The shortest gene is: " + (String)hashResults.get("Shortest")[1] + " with a length of: " + (int)hashResults.get("Shortest")[0] + "\n";
        String messageLongest = "The longest gene is: " + (String)hashResults.get("Longest")[1] + " with a length of: " + (int)hashResults.get("Longest")[0] + "\n\n";
        
        //Set message to display average of length
        String messageAverage = "The average length gene is: " + (double)hashResults.get("Average")[0];
        
        //Increase font of text area since displayed text is small
        mainFrame.displayResultsPane.setFontTextArea(20);
        //Message displayed on text area
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false);//Only text is visible
        //Display text on specific panel
        mainFrame.displayResultsPane.displayText(messageNbExons + messageShortest + messageLongest + messageAverage);
        
    }//GEN-LAST:event_gtfMenuAllStatsActionPerformed

    private void menuAllFastaStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAllFastaStatsActionPerformed
        //Create instance of class gtfStatistics
        fastaStatistics fastaStats = new fastaStatistics();
        
        //Get GC content
        double gc = fastaStats.getGC(mainFrame.fileChooserPanel.getFileContent());
        //Set messages to display
        String messageGC = "The GC content is: " + gc;
        
        //Create instance of class lengthResult to get the results of calculation
        fastaStatistics.lengthResult result = fastaStats.statisticSeqLength(mainFrame.fileChooserPanel.getFileContent());
       //Message to display
        String messageLen;
        
        //Set messages to display
        if(result.getType().equals("single")) 
            messageLen = "The sequence is " + result.getType() + ". It's length is " + result.getLength() + ".";
        else
            messageLen = "The sequence is " + result.getType() + ". The average length of its sequences is " + result.getLength() + ".";
        
        //Increase font of text area since displayed text is small
        mainFrame.displayResultsPane.setFontTextArea(20);
        //Message displayed on text area
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false); //Only text is visible
        //Display text on specific panel
        mainFrame.displayResultsPane.displayText(messageLen + "\n\n" + messageGC);
    }//GEN-LAST:event_menuAllFastaStatsActionPerformed

    private void menuGcContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGcContentActionPerformed
        //Create instance of class gtfStatistics
        fastaStatistics statistics = new fastaStatistics();
        
        //Get GC content
        double gc = statistics.getGC(mainFrame.fileChooserPanel.getFileContent());
        
        //Set messages to display
        String message = "The GC content is: " + gc;
        
        //Increase font of text area since displayed text is small
        mainFrame.displayResultsPane.setFontTextArea(20);
        //Message displayed on text area
        mainFrame.displayResultsPane.setPanelVisible(true, false, false, false); //Only text is visibles
        //Display text on specific panel
        mainFrame.displayResultsPane.displayText(message);
    }//GEN-LAST:event_menuGcContentActionPerformed

    private void menuTextExonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTextExonsActionPerformed
        //Open panel to display results
        mainFrame.displayResultsPane.setPanelVisible(false, false, false, true); //Only text is visible
        //Set the type of display: here textual
        //mainFrame.displayResultsPane.exonsPanel.setTextualDisplay(true);
        //Panel to display is textual
        //mainFrame.displayResultsPane.exonsPanel.changeCardPanel("textual");
        //Open second file selection panel
        mainFrame.displayResultsPane.exonsPanel.secondFileChooser.setVisible(true);
        //Text display
        mainFrame.displayResultsPane.exonsPanel.secondFileChooser.setTextual(true);
        
    }//GEN-LAST:event_menuTextExonsActionPerformed

    private void menuGraphExonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGraphExonsActionPerformed
        //Exon panel becomes visible
        mainFrame.displayResultsPane.setPanelVisible(false, false, false, true);
        //Set the type of display: here graphical
        //mainFrame.displayResultsPane.exonsPanel.setTextualDisplay(false);
        //Panel to display is graphical
        mainFrame.displayResultsPane.exonsPanel.changeCardPanel("graphical");
        //Open second file selection panel
        mainFrame.displayResultsPane.exonsPanel.secondFileChooser.setVisible(true);
        //Graphical display
        mainFrame.displayResultsPane.exonsPanel.secondFileChooser.setTextual(false);
    }//GEN-LAST:event_menuGraphExonsActionPerformed
    
    //Display different menu items according to the chosen file
    public static void setMenu(fileChooserPanel fileChooser){
        boolean gtf = fileChooser.getFileTypes()[0];
        boolean fasta = fileChooser.getFileTypes()[1];
        
        //Set gtf menu visible or not
        gtfMenuDisplayText.setVisible(gtf);
        gtfMenuStats.setVisible(gtf);
        
        //Set fasta menu visible or not
        fastaMenuDisplayText.setVisible(fasta);
        fastaMenuStats.setVisible(fasta); 
        MenuExons.setVisible((gtf|fasta));
    }
        
    //Display information from the previous panel and the chosen file to this panel
    public static void setData(fileChooserPanel fileChooser){
        //Display message of which file was chosen
        internalFrame.setTitle(fileChooser.getFileChosenMessage());
        setMenu(fileChooser);
    }
    
    public void chooseNewFile(){
        mainFrame.fileChooserPanel.setWaitMessage("");
        //Bring the fileChooserPanel back
        this.setVisible(false);
        //Set displayResultPanel to false
        mainFrame.displayResultsPane.setVisible(false);
        mainFrame.fileChooserPanel.setVisible(true);
    }
    
    //Make a new panel visible in th existing dataframe
    private void openNewPanel(JPanel pane){
        //Open new panel
        pane.setVisible(true); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JMenu MenuExons;
    private static javax.swing.JMenu fastaMenuDisplayText;
    private static javax.swing.JMenu fastaMenuStats;
    private javax.swing.JMenuItem gtfMenuAllStats;
    private static javax.swing.JMenu gtfMenuDisplayText;
    private static javax.swing.JMenu gtfMenuStats;
    private static javax.swing.JInternalFrame internalFrame;
    private javax.swing.JMenuItem menuAllFastaStats;
    private javax.swing.JMenuItem menuAverageGeneLength;
    private javax.swing.JMenuItem menuAverageNumberExons;
    private static javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuGcContent;
    private javax.swing.JMenuItem menuGraphExons;
    private javax.swing.JMenuItem menuLongestShortestModels;
    private javax.swing.JMenu menuNewFile;
    private javax.swing.JMenuItem menuSequenceLen;
    private javax.swing.JMenuItem menuTextExons;
    // End of variables declaration//GEN-END:variables
}
